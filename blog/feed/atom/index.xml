<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">tanarky.com</title>
  <subtitle type="text">tanarky website</subtitle>
  <updated>2012-10-11T01:33:24Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>
  <link rel="alternate" type="text/html" href="http://tanarky.com/blog" />
  <id>http://tanarky.com/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://tanarky.com/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://tanarky.com/blog</uri>
    </author>
    <title type="html"><![CDATA[mysql_multiをmacにinstall]]></title>
    <link rel="alternate" type="text/html" href="http://tanarky.com/blog/2012/10/11/010_mysql_multi_on_mac" />
    <id>http://tanarky.com/blog/2012/10/11/010_mysql_multi_on_mac</id>
    <updated>2012-10-11T01:33:24Z</updated>
    <published>2012-10-11T10:00:00Z</published>
    <category scheme="http://tanarky.com/blog" term="env" />
    <category scheme="http://tanarky.com/blog" term="install" />
    <category scheme="http://tanarky.com/blog" term="mysql" />
    <summary type="html"><![CDATA[mysql_multiをmacにinstall]]></summary>
    <content type="html" xml:base="http://tanarky.com/blog/2012/10/11/010_mysql_multi_on_mac"><![CDATA[<div class="document">
<div class="contents topic" id="id1">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#install" id="id2">install</a></li>
</ul>
</div>
<p>Macbookにて、mysql_multiで複数サーバを立てたので、その時のinstallメモ</p>
<p>目的は、dual master replication の failover動作確認をするため</p>
<div class="section" id="install">
<h3><a class="toc-backref" href="#id2">install</a></h3>
<p>Macにmysqlはinstall済みであることが前提</p>
<p>メモリを食うので、必要な時だけ起動するようにplistはunloadしておく</p>
<div class="highlight"><pre># 起動していたら停止
% sudo /opt/local/share/mysql5/mysql/mysql.server stop
% sudo launchctl load -w /Library/LaunchDaemons/org.macports.mysql5.plist

# ここに入っている + pathは通しておく
% which mysql5
/opt/local/bin/mysql5

# エラーになるのでリンクを張っておく等
% sudo ln -s /opt/local/bin/my_print_defaults5 /opt/local/bin/my_print_defaults
% mkdir -p /Users/satoshi.tanaka/var/mysql1
% mkdir -p /Users/satoshi.tanaka/var/mysql2
% mkdir -p /Users/satoshi.tanaka/var/log

# ~/.my.cnf を準備, user名やportなどは適当に変更すること
% cat ~/.my.cnf
[mysqld_multi]
mysqld     = /opt/local/lib/mysql5/bin/mysqld_safe
mysqladmin = /opt/local/lib/mysql5/bin/mysqladmin
user       = root

[mysqld1]
server-id  = 1
socket     = /tmp/mysql1.sock
port       = 13306
pid-file   = /tmp/mysql1.pid
datadir    = /Users/satoshi.tanaka/var/mysql1
language   = /opt/local/share/mysql5/mysql/english
user       = satoshi.tanaka
log        = /Users/satoshi.tanaka/var/log/mysqld1.log
log-error  = /Users/satoshi.tanaka/var/log/mysqld1.error.log

[mysqld2]
server-id  = 2
socket     = /tmp/mysql2.sock
port       = 13307
pid-file   = /tmp/mysql2.pid
datadir    = /Users/satoshi.tanaka/var/mysql2
language   = /opt/local/share/mysql5/mysql/english
user       = satoshi.tanaka
log        = /Users/satoshi.tanaka/var/log/mysqld2.log
log-error  = /Users/satoshi.tanaka/var/log/mysqld2.error.log

# datadirの準備
% mysql_install_db5 --datadir=./var/mysql1/
% mysql_install_db5 --datadir=./var/mysql2/

# 起動して確認
% /opt/local/bin/mysqld_multi5 start --log=/tmp/mysqld_multi.log
% /opt/local/bin/mysqld_multi5 report --log=/tmp/mysqld_multi.log
Reporting MySQL servers
MySQL server from group: mysqld1 is running
MySQL server from group: mysqld2 is running
% mysql5 -S /tmp/mysql2.sock
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 3
Server version: 5.1.63-log Source distribution

Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

mysql&gt;
</pre></div>
</div>
</div>
]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://tanarky.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Rhino/Node Javascript実行環境構築 on Macbook]]></title>
    <link rel="alternate" type="text/html" href="http://tanarky.com/blog/2012/03/12/00f_javascript_env_on_macbook" />
    <id>http://tanarky.com/blog/2012/03/12/00f_javascript_env_on_macbook</id>
    <updated>2012-10-11T01:08:31Z</updated>
    <published>2012-03-12T14:00:00Z</published>
    <category scheme="http://tanarky.com/blog" term="javascript" />
    <category scheme="http://tanarky.com/blog" term="env" />
    <category scheme="http://tanarky.com/blog" term="install" />
    <summary type="html"><![CDATA[Rhino/Node Javascript実行環境構築 on Macbook]]></summary>
    <content type="html" xml:base="http://tanarky.com/blog/2012/03/12/00f_javascript_env_on_macbook"><![CDATA[<div class="document">
<div class="contents topic" id="id1">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#rhino" id="id3">Rhino</a></li>
<li><a class="reference internal" href="#node" id="id4">Node</a></li>
</ul>
</div>
<p>Macbookにて、Javascript実行環境を整えたので、その際の手順履歴</p>
<div class="section" id="rhino">
<h3><a class="toc-backref" href="#id3">Rhino</a></h3>
<p>Rhino = Java実装のJavascript実行環境</p>
<p>その他の言語のJava実装は以下のものがある</p>
<div class="highlight"><pre>Jython - port of Python.
JRuby - port of Ruby.
Rhino - port of ECMAScript.
Clojure - Lisp dialect.
Groovy - Scripting language for the JVM.
Scala - object-oriented, functional language for the JVM.
</pre></div>
<p>Macにinstallするには、brew installで一発。</p>
<p>2012/03/12 時点でinstallされるversionは1.7R3</p>
<div class="highlight"><pre>brew install rhino
</pre></div>
<p>実行するには以下のjarを指定する。-eでコードを直接渡す。</p>
<div class="highlight"><pre>% java -jar /usr/local/Cellar/rhino/1.7R3/libexec/js.jar -e &quot;print(&#39;hello world!&#39;);&quot;
java -jar /usr/local/Cellar/rhino/1.7R3/libexec/js.jar -e &quot;print(&#39;hello worldjava -jar /usr/local/Cellar/rhino/1.7R3/libexec/js.jar&#39;);&quot;
hello worldjava -jar /usr/local/Cellar/rhino/1.7R3/libexec/js.jar
%
</pre></div>
<p>インタラクティブシェルは以下の通りに実行できる</p>
<div class="highlight"><pre>% java -jar /usr/local/Cellar/rhino/1.7R3/libexec/js.jar
Rhino 1.7 release 3 2011 05 09
js&gt; print(&#39;hello world!&#39;);
hello world!
js&gt;
</pre></div>
<p><a class="reference external" href="https://developer.mozilla.org/ja/Rhino">Rhino</a></p>
</div>
<div class="section" id="node">
<h3><a class="toc-backref" href="#id4">Node</a></h3>
<p><a class="reference external" href="http://nodejs.org/">http://nodejs.org/</a></p>
<p>こちらもJavascript実行環境。実装はV8だったりSpiderMondkeyだったり。</p>
<p>同じく、brew installにて。</p>
<div class="highlight"><pre>% brew install node
</pre></div>
<p>npmと単体テストフレームワークもついでにinstall</p>
<div class="highlight"><pre>% git clone git://github.com/creationix/nvm.git ~/.nvm
% nvm install v0.6.12
% nvm alias default v0.6.12
% source ~/.nvm/nvm.sh
% curl http://npmjs.org/install.sh | sh
% npm install nodeunit
% ln -s $HOME/.npm/nodeunit/0.7.4/package/bin/nodeunit $HOME/bin/nodeunit
</pre></div>
<ul class="simple">
<li><a class="reference external" href="http://d.hatena.ne.jp/ToQoz/20120312/1331512182">zsh on mac で nvm -&gt; nvm_ls:17: no matches found: vdefault* 対処</a></li>
</ul>
</div>
</div>
]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://tanarky.com/blog</uri>
    </author>
    <title type="html"><![CDATA[thinkpad x100eのキーボード設定メモ]]></title>
    <link rel="alternate" type="text/html" href="http://tanarky.com/blog/2012/02/21/00e_thinkpad_x100e_keyboard_config" />
    <id>http://tanarky.com/blog/2012/02/21/00e_thinkpad_x100e_keyboard_config</id>
    <updated>2012-03-12T05:28:42Z</updated>
    <published>2012-02-21T14:00:00Z</published>
    <category scheme="http://tanarky.com/blog" term="tips" />
    <summary type="html"><![CDATA[thinkpad x100eのキーボード設定メモ]]></summary>
    <content type="html" xml:base="http://tanarky.com/blog/2012/02/21/00e_thinkpad_x100e_keyboard_config"><![CDATA[<div class="document" id="thinkpad-x100e">
<h1 class="title">thinkpad x100eのキーボード設定メモ</h1>
<p>Macbook Proとの使い分けをするために、
できるだけ似たようなキー操作になるように模索したメモ</p>
<p>thinkpad(Ubuntu 11.10)の英語キーボードの設定をどうするか、という視点で書く</p>
<ol class="arabic simple">
<li>システム設定の&quot;キーボードレイアウト&quot;を開き、オプションで以下の設定をする</li>
</ol>
<blockquote>
<ol class="loweralpha simple">
<li>Alt/Winキーの操作 -&gt; デフォルトのまま</li>
<li>Ctrlキーの位置 -&gt; &quot;Make Caps Lock an additional Ctrl&quot;</li>
</ol>
</blockquote>
<ol class="arabic simple" start="2">
<li>IBusの設定(Input Methods)を開いた以下の設定をする</li>
</ol>
<blockquote>
<ol class="loweralpha simple">
<li>入力モードの切り替えを、Alt+Spaceにする</li>
<li>言語パネルはメニューに組み込む</li>
</ol>
</blockquote>
<ol class="arabic simple" start="3">
<li>システム設定の&quot;キーボード&quot;を開き、ショートカットを以下の設定とする</li>
</ol>
<blockquote>
<ol class="loweralpha simple">
<li>&quot;ウィンドウメニューをアクティブにする&quot;ショートカットをWin+Spaceに</li>
</ol>
</blockquote>
<p>これにより、</p>
<ul class="simple">
<li>Alt+TabでWindow切り替えができる。
MacだとAltの位置(Spaceの左隣)にコマンドキーがあるので、同じキー</li>
<li>Alt+Spaceで入力切り替えが出来る。
MacだとAltの位置(Spaceの左隣)にコマンドキーがあるので、これも同じキー</li>
<li>Win+Spaceでウィンドウメニューを開ける。
Macだと別ショートカットなので、これに割り当ててもよし</li>
</ul>
<p>以上。</p>
</div>
]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://tanarky.com/blog</uri>
    </author>
    <title type="html"><![CDATA[jQuery UI autocomplete サンプル]]></title>
    <link rel="alternate" type="text/html" href="http://tanarky.com/blog/2012/02/11/00c_jqueryui_autocomplete_samples" />
    <id>http://tanarky.com/blog/2012/02/11/00c_jqueryui_autocomplete_samples</id>
    <updated>2012-03-12T05:28:42Z</updated>
    <published>2012-02-11T21:00:00Z</published>
    <category scheme="http://tanarky.com/blog" term="jquery" />
    <category scheme="http://tanarky.com/blog" term="javascript" />
    <category scheme="http://tanarky.com/blog" term="jqueryui" />
    <summary type="html"><![CDATA[jQuery UI autocomplete サンプル]]></summary>
    <content type="html" xml:base="http://tanarky.com/blog/2012/02/11/00c_jqueryui_autocomplete_samples"><![CDATA[<div class="document">
<div class="contents topic" id="id1">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#id2" id="id6">スクロールバー付きサンプル</a></li>
<li><a class="reference internal" href="#suggest" id="id7">同一suggestデータサンプル</a></li>
<li><a class="reference internal" href="#remotesuggest" id="id8">remote問い合わせsuggest</a></li>
<li><a class="reference internal" href="#id5" id="id9">関連リンク</a></li>
</ul>
</div>
<p>jQuery UI の autocomplete ウィジェットについて
調査したので、その時のメモ</p>
<dl class="docutils">
<dt>jquery version</dt>
<dd>1.7.1</dd>
<dt>jquery UI version</dt>
<dd>1.8.16</dd>
</dl>
<div class="section" id="id2">
<h3><a class="toc-backref" href="#id6">スクロールバー付きサンプル</a></h3>
<p>銀行名か金融機関コードで検索して、
入力補完してくれるサンプルを書いた</p>
<ul class="simple">
<li><a class="reference external" href="http://tanarky.com/samples/jqueryui/autocomplete/sample3.html">jquery UI autocomplete スクロール付きサンプル</a></li>
<li><a class="reference external" href="https://github.com/tanarky/tanarky.github.com/blob/master/samples/jqueryui/autocomplete/sample3.html">jquery UI autocomplete スクロール付きサンプル(ソースコード)</a></li>
</ul>
<p>ポイントは以下の通り</p>
<ol class="arabic simple">
<li>.ui-autocompleteクラスにmax-heightを指定することで、autocomplete部分のスクロールを実現</li>
<li>候補がクリックされたときに、そのイベントを拾って、別フィールド2つにデータを補完</li>
<li>別フィールドはreadonly属性で編集不可に</li>
<li>autocomplete optionにminLength=0を指定。入力がなくても、下キーで候補表示</li>
<li>suggestデータは、javascript内部にベタ書きで持っている。</li>
</ol>
<blockquote>
<ul class="simple">
<li>データ構造は、配列</li>
<li>配列の要素は、Hashで、valueというキーの値が検索対象となる</li>
<li>value以外は、任意のキーを指定可能</li>
</ul>
</blockquote>
</div>
<div class="section" id="suggest">
<h3><a class="toc-backref" href="#id7">同一suggestデータサンプル</a></h3>
<p>こちらも、銀行名か金融機関コードで検索して、
入力補完してくれるサンプル。</p>
<p>前のサンプルと違う点は、2つのフィールドに対して、同一のsuggestデータを使っている</p>
<ul class="simple">
<li><a class="reference external" href="http://tanarky.com/samples/jqueryui/autocomplete/sample4.html">jquery UI autocomplete 2つの検索フィールドサンプル</a></li>
<li><a class="reference external" href="https://github.com/tanarky/tanarky.github.com/blob/master/samples/jqueryui/autocomplete/sample4.html">jquery UI autocomplete 2つの検索フィールドサンプル(ソースコード)</a></li>
</ul>
<p>ポイントは以下の通り</p>
<ol class="arabic simple">
<li>focusオプションで、候補にマウスオーバーした時点でデータを入れる(return false忘れずに)</li>
<li>複数のフィールドに同一オプションでautocomplete登録</li>
</ol>
</div>
<div class="section" id="remotesuggest">
<h3><a class="toc-backref" href="#id8">remote問い合わせsuggest</a></h3>
<p>上記2つのサンプルは、挙動を理解しやすいようにするため、
サジェストするためのデータはコードに埋めたが、
remote API呼び出しも可能。</p>
<ul class="simple">
<li><a class="reference external" href="http://jqueryui.com/demos/autocomplete/#remote">jquery UI autocomplete 公式ドキュメント demo(remote API呼び出し)</a></li>
</ul>
<p>上記のサンプルでは、jquery側空、search.phpというAPIを呼び出し、
APIがJSON形式のデータを返している。</p>
<p>APIは、GETのパラメータで&quot;term&quot;を受け取り、
それに基づくsuggestデータを返却している</p>
<p><a class="reference external" href="http://jqueryui.com/demos/autocomplete/search.php?term=or">http://jqueryui.com/demos/autocomplete/search.php?term=or</a></p>
</div>
<div class="section" id="id5">
<h3><a class="toc-backref" href="#id9">関連リンク</a></h3>
<ul class="simple">
<li><a class="reference external" href="http://jqueryui.com/demos/autocomplete/">jquery UI autocomplete 公式ドキュメント demo</a></li>
</ul>
</div>
</div>
]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://tanarky.com/blog</uri>
    </author>
    <title type="html"><![CDATA[(できるだけ)ポータブルなPython開発環境]]></title>
    <link rel="alternate" type="text/html" href="http://tanarky.com/blog/2012/01/20/00a_portable_python_env" />
    <id>http://tanarky.com/blog/2012/01/20/00a_portable_python_env</id>
    <updated>2012-03-12T05:28:42Z</updated>
    <published>2012-01-20T14:00:00Z</published>
    <category scheme="http://tanarky.com/blog" term="python" />
    <category scheme="http://tanarky.com/blog" term="tips" />
    <category scheme="http://tanarky.com/blog" term="install" />
    <summary type="html"><![CDATA[(できるだけ)ポータブルなPython開発環境]]></summary>
    <content type="html" xml:base="http://tanarky.com/blog/2012/01/20/00a_portable_python_env"><![CDATA[<div class="document">
<div class="contents topic" id="id1">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#id2" id="id5">背景</a></li>
<li><a class="reference internal" href="#buildoutvirtualenv1" id="id6">buildoutとvirtualenvを用いた1つの解</a><ul>
<li><a class="reference internal" href="#id3" id="id7">参考手順</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id4" id="id8">まとめ など</a></li>
</ul>
</div>
<div class="section" id="id2">
<h3><a class="toc-backref" href="#id5">背景</a></h3>
<p>せっかくLLをさわっているので、</p>
<ul class="simple">
<li>OS依存が少ない</li>
<li>複数versionの環境の混在</li>
<li>構築の簡単さ</li>
<li>本番環境でも使える性能</li>
<li>環境をコピーできる</li>
</ul>
<p>というPython環境が欲しくて、色々考えてる</p>
</div>
<div class="section" id="buildoutvirtualenv1">
<h3><a class="toc-backref" href="#id6">buildoutとvirtualenvを用いた1つの解</a></h3>
<p>以下のようなことを考えた</p>
<ul class="simple">
<li>コンパイルが必要なライブラリ(Python自体も含む)をbuildoutでビルドする<ul>
<li>Python</li>
<li>zlib</li>
<li>Graphviz</li>
<li>画像系パッケージ?</li>
<li>(yum/aptitudeでもいいが、後々環境が混在できなくなるリスク)</li>
</ul>
</li>
<li>buldoutでbuildしたpythonを指定して、virtualenv環境を構築する</li>
<li>PyPIパッケージは、virtualenvにinstallする</li>
<li>サービスはvirtualenv環境ごとに分ける<ul>
<li>サービスごとにpythonのバージョンをわけるためにBuildするのは大変</li>
<li>サービスごとにライブラリのバージョンが競合する可能性はあるので
その時はbuildout環境を増やす</li>
</ul>
</li>
<li>自分で書いたコードは、githubや自前distサーバなどにパッケージとしておいておく</li>
<li>環境から、distサーバ指定でpip installしてdeploy</li>
</ul>
<div class="section" id="id3">
<h4><a class="toc-backref" href="#id7">参考手順</a></h4>
<ol class="arabic simple">
<li>まずは、buildoutでOS依存しない場所にPythonと
依存するライブラリなどをビルド</li>
</ol>
<div class="highlight"><pre>% mkdir /tmp/py27
% cd /tmp/py27
% (buildout.cfg + bootstrap.pyを用意)
% cat buildout.cfg
[buildout]
python = python
parts =
    python
    env

[python]
recipe = zc.recipe.cmmi
url = http://www.python.org/ftp/python/2.7.2/Python-2.7.2.tgz
executable = ${buildout:parts-directory}/python/bin/python2.7
environment =
    LDFLAGS=-Wl,-rpath,${buildout:parts-directory}/python/lib
extra_options =
    --enable-unicode=ucs4
    --enable-shared
    --with-threads

[env]
recipe = zc.recipe.egg
eggs =
     virtualenv
     virtualenvwrapper

interpreter = python

% python bootstrap.py
% bin/buildout
</pre></div>
<ol class="arabic simple" start="2">
<li>1.で構築したpythonを使って、virtualenv環境を作る</li>
</ol>
<div class="highlight"><pre>% export WORKON_HOME=/tmp/virtualenvs
% export VIRTUALENVWRAPPER_HOOK_DIR=/tmp/virtualenvs
% export VIRTUALENVWRAPPER_LOG_DIR=/tmp/virtualenvs
## FIXME: クリーンな環境でうまくいくか?
% mkvirtualenv -p /tmp/py27/parts/python/bin/python testenv
% /tmp/virtualenvs/testenv/bin/pip install Flask
% /tmp/virtualenvs/testenv/bin/pip install gunicorn
% /tmp/virtualenvs/testenv/bin/pip install supervisor
</pre></div>
<ol class="arabic simple" start="3">
<li>開発</li>
</ol>
<div class="highlight"><pre>% cat myserver.py

from flask import Flask

app = Flask(__name__)

@app.route(&#39;/&#39;)
def index():
    return &quot;&lt;h1&gt;hello!Yes!&lt;/h1&gt;&quot;

if __name__ == &#39;__main__&#39;:
    app.run(debug=True)
% /tmp/virtualenvs/testenv/bin/python myserver.py
   * Running on http://127.0.0.1:5000/
   * Restarting with reloader
</pre></div>
<ol class="arabic simple" start="4">
<li>インストール</li>
</ol>
<p>cpでinstallしないほうがいい(暫定手順)</p>
<div class="highlight"><pre>% sudo mkdir /tmp/virtualenvs/testenv/lib/python2.7/site-packages/mypj
% touch /tmp/virtualenvs/testenv/lib/python2.7/site-packages/mypj/__init__.py
% sudo cp myserver.py /tmp/virtualenvs/testenv/lib/python2.7/site-packages/mypj/
</pre></div>
<ol class="arabic simple" start="5">
<li>gunicornで本番プロセス起動</li>
</ol>
<p>本当はdaemonモード</p>
<div class="highlight"><pre>% /tmp/virtualenvs/testenv/bin/gunicorn mypj.myserver:app
</pre></div>
</div>
</div>
<div class="section" id="id4">
<h3><a class="toc-backref" href="#id8">まとめ など</a></h3>
<ul class="simple">
<li>gunicornが起動するところまで確認できたので、supervisorで監視体制を整えたい</li>
<li>古めのCentOSでも動くか?</li>
<li>zlib/graphvizなどのライブラリ系もbuildoutに組み込みたい</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://tanarky.com/blog</uri>
    </author>
    <title type="html"><![CDATA[PostfixでGmail経由メール送信環境構築 on Ubuntu]]></title>
    <link rel="alternate" type="text/html" href="http://tanarky.com/blog/2012/01/02/009_install_postfix_on_ubuntu" />
    <id>http://tanarky.com/blog/2012/01/02/009_install_postfix_on_ubuntu</id>
    <updated>2012-05-28T08:41:50Z</updated>
    <published>2012-01-02T14:00:00Z</published>
    <category scheme="http://tanarky.com/blog" term="tips" />
    <category scheme="http://tanarky.com/blog" term="install" />
    <category scheme="http://tanarky.com/blog" term="ubuntu" />
    <summary type="html"><![CDATA[PostfixでGmail経由メール送信環境構築 on Ubuntu]]></summary>
    <content type="html" xml:base="http://tanarky.com/blog/2012/01/02/009_install_postfix_on_ubuntu"><![CDATA[<div class="document">
<div class="contents topic" id="id1">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#id2" id="id4">環境構築手順</a></li>
<li><a class="reference internal" href="#id3" id="id5">参考</a></li>
</ul>
</div>
<div class="section" id="id2">
<h3><a class="toc-backref" href="#id4">環境構築手順</a></h3>
<p>AppEngineの開発環境で、メール送信機能を使うために
postfixを使ったgmail送信環境の構築を行ったので、メモ。</p>
<p>まずは、package install</p>
<div class="highlight"><pre>% sudo aptitude install postfix libsasl2-modules
</pre></div>
<p>/etc/postfix/main.cf を編集</p>
<p>以下を追記</p>
<div class="highlight"><pre># tanarky added
mydomain = tanarky.com
myorigin = $myhostname
relayhost = [smtp.gmail.com]:587
smtp_use_tls = yes
smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt
smtp_sasl_auth_enable = yes
smtp_sasl_password_maps = hash:/etc/postfix/relay_password
smtp_sasl_security_options = noanonymous
smtp_sasl_tls_security_options = noanonymous
smtp_sasl_mechanism_filter = plain
</pre></div>
<p>パスワードファイル作成</p>
<div class="highlight"><pre>% sudo cat /etc/postfix/relay_password
[smtp.gmail.com]:587 *(Googleアカウント)*@gmail.com:*(Googleアカウントパスワード)*
% sudo postmap /etc/postfix/relay_password
% ls -l /etc/postfix/relay_password*
-rw-r--r-- 1 root root    48 2012-01-01 22:17 /etc/postfix/relay_password
-rw-r--r-- 1 root root 12288 2012-01-01 22:17 /etc/postfix/relay_password.db
% sudo rm /etc/postfix/relay_password
% ls -l /etc/postfix/relay_password*
-rw-r--r-- 1 root root 12288 2012-01-01 22:17 /etc/postfix/relay_password.db
</pre></div>
<p>postfix restartしてテスト送信</p>
<div class="highlight"><pre>% sudo /etc/init.d/postfix restart
% sendmail -t ***
To: ***
From: ***
Subject: hello

world.

.
%
</pre></div>
</div>
<div class="section" id="id3">
<h3><a class="toc-backref" href="#id5">参考</a></h3>
<ul class="simple">
<li><a class="reference external" href="http://www.icoro.com/200908243988.html">http://www.icoro.com/200908243988.html</a></li>
<li><a class="reference external" href="http://blog.tanarky.com/2010/09/centosgmail.html">http://blog.tanarky.com/2010/09/centosgmail.html</a></li>
</ul>
</div>
</div>
]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://tanarky.com/blog</uri>
    </author>
    <title type="html"><![CDATA[PythonでQRコード生成]]></title>
    <link rel="alternate" type="text/html" href="http://tanarky.com/blog/2011/12/19/008_python_qrcode" />
    <id>http://tanarky.com/blog/2011/12/19/008_python_qrcode</id>
    <updated>2012-03-12T05:28:42Z</updated>
    <published>2011-12-19T14:00:00Z</published>
    <category scheme="http://tanarky.com/blog" term="python" />
    <category scheme="http://tanarky.com/blog" term="tips" />
    <summary type="html"><![CDATA[PythonでQRコード生成]]></summary>
    <content type="html" xml:base="http://tanarky.com/blog/2011/12/19/008_python_qrcode"><![CDATA[<div class="document">
<div class="contents topic" id="id1">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#id2" id="id5">環境構築手順</a></li>
<li><a class="reference internal" href="#id3" id="id6">動作確認</a></li>
<li><a class="reference internal" href="#id4" id="id7">リンク</a></li>
</ul>
</div>
<div class="section" id="id2">
<h3><a class="toc-backref" href="#id5">環境構築手順</a></h3>
<p>libqrencodeのpython bindingによるQRコード生成</p>
<p>まずはinstall</p>
<div class="highlight"><pre>% sudo aptitude install libqrencode3 libqrencode-dev
% pip install qrencode
</pre></div>
</div>
<div class="section" id="id3">
<h3><a class="toc-backref" href="#id6">動作確認</a></h3>
<p>サンプルコード</p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">qrencode</span>

<span class="n">e</span> <span class="o">=</span> <span class="n">Encoder</span><span class="p">()</span>
<span class="n">image</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;http://tanarky.com/&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="s">&#39;width&#39;</span><span class="p">:</span> <span class="mi">100</span> <span class="p">})</span>
<span class="n">image</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&quot;/tmp/qrcode.png&quot;</span><span class="p">)</span>
</pre></div>
</div>
<div class="section" id="id4">
<h3><a class="toc-backref" href="#id7">リンク</a></h3>
<ul class="simple">
<li><a class="reference external" href="https://github.com/bitly/pyqrencode">https://github.com/bitly/pyqrencode</a></li>
</ul>
</div>
</div>
]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://tanarky.com/blog</uri>
    </author>
    <title type="html"><![CDATA[CentOS 5.5 に python2.7環境を構築]]></title>
    <link rel="alternate" type="text/html" href="http://tanarky.com/blog/2011/11/16/005_python_2.7_install_on_centos_5.5" />
    <id>http://tanarky.com/blog/2011/11/16/005_python_2.7_install_on_centos_5.5</id>
    <updated>2012-03-12T05:28:42Z</updated>
    <published>2011-11-16T00:00:00Z</published>
    <category scheme="http://tanarky.com/blog" term="python" />
    <category scheme="http://tanarky.com/blog" term="tips" />
    <category scheme="http://tanarky.com/blog" term="install" />
    <category scheme="http://tanarky.com/blog" term="centos" />
    <summary type="html"><![CDATA[CentOS 5.5 に python2.7環境を構築]]></summary>
    <content type="html" xml:base="http://tanarky.com/blog/2011/11/16/005_python_2.7_install_on_centos_5.5"><![CDATA[<div class="document">
<div class="contents topic" id="id1">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#id2" id="id4">手順</a></li>
<li><a class="reference internal" href="#id3" id="id5">参考</a></li>
</ul>
</div>
<div class="section" id="id2">
<h3><a class="toc-backref" href="#id4">手順</a></h3>
<p>CentOS 5.5に入っているpythonのバージョンは、2.4.3と超古いので、
2.7.2の環境を構築したときのメモ</p>
<p>一度2.7.2の環境を作れば、
あとはvirtualenvで環境を切り分ければいいので、
それまでの手順</p>
<div class="highlight"><pre>% mkdir ~/src_python2.7
% cd ~/src_python2.7
% wget http://www.python.org/ftp/python/2.7.2/Python-2.7.2.tar.bz2
% tar -xvjf Python-2.7.2.tar.bz2
% cd Python-2.7.2
% ./configure --enable-shared --with-threads
% make
% sudo make install
% sudo ln -s /opt/python2.7/lib/libpython2.7.so.1.0 /lib64/libpython2.7.so.1.0
% sudo ln -s /usr/local/bin/python2.7 /usr/bin/python2.7
% mkdir ~/src_setuptools
% cd ~/src_setuptools
% wget http://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg
% sudo yum install zlib-devel.x86_64
% chmod +x setuptools-0.6c11-py2.7.egg
% sudo ./setuptools-0.6c11-py2.7.egg
% sudo easy_install pip
% sudo pip install virtualenv virtualenvwrapper
</pre></div>
<p>virtualenv環境構築。
後で配布することを想定して、デフォルトの&quot;.virtualenvs&quot;から&quot;virtualenv&quot;に変更する。</p>
<p>以下を.zshrcに追加</p>
<div class="highlight"><pre>export WORKON_HOME=$HOME/virtualenvs
source /usr/local/bin/virtualenvwrapper.sh
</pre></div>
<p>環境を構築</p>
<div class="highlight"><pre>% mkvirtualenv -p /usr/local/bin/python2.7 2.7.2
% workon 2.7.2
</pre></div>
<p>とりあえずうまく環境が構築できたが、
複数台環境にpython環境を丸ごと配布したいので、
次はその方法を調べてみる。</p>
</div>
<div class="section" id="id3">
<h3><a class="toc-backref" href="#id5">参考</a></h3>
<ul class="simple">
<li><a class="reference external" href="http://python.codenote.net/python/centos5-6%E3%81%ABpython2-7%E3%81%A8virtualenv%E3%81%A7%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E3%81%88%E3%82%8B.html">CentOS5.6 に Python2.7 + virtualenv で開発環境を整える | Pythonコード帳</a></li>
</ul>
</div>
</div>
]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://tanarky.com/blog</uri>
    </author>
    <title type="html"><![CDATA[Ubuntu 10.04 LTS server でpython環境をbuildoutで構築する]]></title>
    <link rel="alternate" type="text/html" href="http://tanarky.com/blog/2011/11/09/007_python_buildout_on_ubuntu_server_x86_64" />
    <id>http://tanarky.com/blog/2011/11/09/007_python_buildout_on_ubuntu_server_x86_64</id>
    <updated>2012-03-12T05:28:42Z</updated>
    <published>2011-11-09T14:00:00Z</published>
    <category scheme="http://tanarky.com/blog" term="python" />
    <category scheme="http://tanarky.com/blog" term="tips" />
    <category scheme="http://tanarky.com/blog" term="install" />
    <category scheme="http://tanarky.com/blog" term="ubuntu" />
    <summary type="html"><![CDATA[Ubuntu 10.04 LTS server でpython環境をbuildoutで構築する]]></summary>
    <content type="html" xml:base="http://tanarky.com/blog/2011/11/09/007_python_buildout_on_ubuntu_server_x86_64"><![CDATA[<div class="document">
<div class="contents topic" id="id1">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#id2" id="id3">手順</a></li>
</ul>
</div>
<div class="section" id="id2">
<h3><a class="toc-backref" href="#id3">手順</a></h3>
<div class="highlight"><pre>% sudo apt-get install zsh aptitude
% sudo aptitude update
% sudo aptitude install gcc zlib1g-dev libc6-dev libjpeg-dev -y
</pre></div>
<ul class="simple">
<li>2012/01/22 追記<ul>
<li>PILでjpegサポートさせるために、libjpeg-devを追加</li>
</ul>
</li>
</ul>
</div>
</div>
]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://tanarky.com/blog</uri>
    </author>
    <title type="html"><![CDATA[githubとblogofileで独自ドメイン無料Blog環境構築]]></title>
    <link rel="alternate" type="text/html" href="http://tanarky.com/blog/2011/10/29/002_github_blogofile_original_domain" />
    <id>http://tanarky.com/blog/2011/10/29/002_github_blogofile_original_domain</id>
    <updated>2012-03-12T05:28:42Z</updated>
    <published>2011-10-29T20:00:00Z</published>
    <category scheme="http://tanarky.com/blog" term="python" />
    <category scheme="http://tanarky.com/blog" term="tips" />
    <category scheme="http://tanarky.com/blog" term="ubuntu" />
    <summary type="html"><![CDATA[githubとblogofileで独自ドメイン無料Blog環境構築]]></summary>
    <content type="html" xml:base="http://tanarky.com/blog/2011/10/29/002_github_blogofile_original_domain"><![CDATA[<div class="document">
<div class="contents topic" id="id1">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#id2" id="id9">結論</a><ul>
<li><a class="reference internal" href="#github-pageshtml" id="id10">Github PagesによるHTML公開+独自ドメイン設定</a></li>
<li><a class="reference internal" href="#blogofile" id="id11">Blogofileを使った記事+デザイン構築</a></li>
<li><a class="reference internal" href="#bootstrap-from-twitter" id="id12">Bootstrap from twitterを使ったデザイン</a></li>
<li><a class="reference internal" href="#disqus" id="id13">DISQUSなどブログパーツを用いたソーシャル対応など</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id3" id="id14">諦めた機能</a></li>
<li><a class="reference internal" href="#id4" id="id15">まとめ</a></li>
</ul>
</div>
<div class="section" id="id2">
<h3><a class="toc-backref" href="#id9">結論</a></h3>
<p>いきなり結論。</p>
<p><a class="reference external" href="/blog/2011/10/29/003_problems_of_web_tool_based_blog_service">既存ブログサービスの問題に対する考察</a> で考えた理想のBlog環境は
以下のものを組み合わせることにより、ほぼ満足いく環境ができた。</p>
<ol class="arabic simple">
<li><a class="reference external" href="http://pages.github.com/">GitHub Pages</a> によるHTML公開+独自ドメイン設定</li>
<li><a class="reference external" href="http://www.blogofile.com/">Blogofile</a> による記事HTML+デザインの一括generate</li>
<li><a class="reference external" href="http://twitter.github.com/bootstrap/">Bootstrap from twitter</a> によるデザイン設定の簡略化</li>
<li><a class="reference external" href="http://disqus.com/">DISQUS</a> やその他ブログパーツによるブログのソーシャル化</li>
</ol>
<p>今見ているこのBlogのソースコードは全て</p>
<p><a class="reference external" href="https://github.com/tanarky/tanarky.github.com">https://github.com/tanarky/tanarky.github.com</a></p>
<p>に上げている。</p>
<p>以下、詳細。</p>
<div class="section" id="github-pageshtml">
<h4><a class="toc-backref" href="#id10">Github PagesによるHTML公開+独自ドメイン設定</a></h4>
<p>GitHubでは、コードだけではなく、HTMLなどのドキュメントも
GitHubのサーバを用いて公開することができる。</p>
<p>静的なファイルであれば、HTMLやCSS/Javascriptなど公開可能。
画像ファイルも公開可能だが、無料ユーザの場合、容量制限が300Mなので、
画像ファイル置き場としてはあまり望ましくない。
PHPファイルなどサーバサイドでの動的処理は動かない。</p>
<p>この手段は、一部のオープンソースプロジェクトでよく利用されている。</p>
<p>設定な方法詳細は、 <a class="reference external" href="http://pages.github.com/">GitHub Pages</a> を参照すれば詳しく書いてあるが
ユーザごとのページ設定手順をざっと説明すると、以下の通り。</p>
<ol class="arabic simple">
<li>GitHubのユーザ名(アカウント)を tanarky とする</li>
<li>tanarky.github.com というリポジトリを作成する</li>
<li>リポジトリ直下にindex.htmlという名前のHTMLファイルをコミットし、pushする</li>
<li><a class="reference external" href="http://tanarky.github.com/">http://tanarky.github.com/</a> で公開したHTMLが見えるようになる</li>
</ol>
<p>と、いたって簡単。</p>
<p>tanarky.github.com というドメイン名が気に入らなければ、
<strong>独自ドメイン設定も可能</strong> 。</p>
<p>valuedomainなどで取得済みのドメイン名が <em>example.com</em> だった場合、</p>
<p><em>github.example.com</em> というサブドメインで公開したければ、</p>
<div class="highlight"><pre>cname github pages.github.com.
</pre></div>
<p>サブドメインではなく、 <em>example.com</em> で公開したければ、</p>
<div class="highlight"><pre>a @ 207.97.227.245
</pre></div>
<p>と、どちらかお好みのDNS設定をする。</p>
<p>次に、tanarky.github.comというリポジトリの直下に、 <em>CNAME</em> というファイル名で、
中身に公開したい独自ドメイン名を書く。</p>
<p><em>example.com</em> で公開したければ、</p>
<div class="highlight"><pre>example.com
</pre></div>
<p>と1行書いて保存すればOK。</p>
<p>これをgit pushして、DNSの設定が反映されれば設定完了。</p>
<p>GitHubを用いることで、無料のHTMLサーバと、
gitによるコード管理とバックアップ環境が、同時に無料で手に入ってしまった。</p>
</div>
<div class="section" id="blogofile">
<h4><a class="toc-backref" href="#id11">Blogofileを使った記事+デザイン構築</a></h4>
<p><a class="reference external" href="http://www.blogofile.com/">Blogofile</a> とは、markdown形式やrestructuredText形式のファイルから、
静的HTMLをgenerateして、ブログページを構築してくれるPythonで書かれたツールのこと。</p>
<p>1コマンドでカテゴリ分類やRSSなども一括でgenerateしてくれる。</p>
<p>インストール方法、の前に、まずはPython環境を整える必要があるので、
<a class="reference external" href="/blog/2011/10/26/001_python_development_environment/">Ubuntu11.10のPython開発環境を整備</a> を一読することをおすすめします。</p>
<p>綺麗なPython環境ができたところで、インストール。</p>
<div class="highlight"><pre>% pip install blogofile
% cd ~/github/tanarky.github.com
% mkdir _blogofile
% cd _blogofile
% blogofile init simple_blog
% blogofile build
</pre></div>
<p>これで完了。
ポイントとしては、ディレクトリ名を &quot;_blogofile&quot; と &quot;_&quot; から始まる名前にしておくこと。</p>
<p>GitHub Page経由では、&quot;_&quot; から始まるファイル名やディレクトリ名は見えなくなるという仕様を利用するため。</p>
<p>github経由でソースが見れるんだから意味ないじゃん、という言い分もあるが、
GitHub Page経由では公開する必要がないファイルなので、
公開したいファイルやディレクトリと明示的に区別するために、&quot;_&quot; から始まる名前にしておく。</p>
<p>buildが終わったら、blogofileには、 <strong>Webサーバが同梱されている</strong> ので、</p>
<div class="highlight"><pre>% blogofile serve 10080
Blogofile server started on 127.0.0.1:10080 ...
</pre></div>
<p>などとWebサーバを起動させれば、http://localhost:10080/でサイトを確認することができる。</p>
<p>投稿は、_blogofile/_post/ 以下に、markdown形式やrst形式などでファイルを置いておけば、
build実行時に勝手にブログ記事にしてくれる。</p>
<p>自分はrst形式に慣れているので、rst形式で記事を書いている。</p>
</div>
<div class="section" id="bootstrap-from-twitter">
<h4><a class="toc-backref" href="#id12">Bootstrap from twitterを使ったデザイン</a></h4>
<p>デザインを1から作るのは大変なので、使ったことがある jQuery UI を使おうか、と思ったが、
このブログでは、勉強がてら、 <a class="reference external" href="http://twitter.github.com/bootstrap/">Bootstrap from twitter</a> を使ってみた。</p>
<p>アイコンなどの画像は一切ついていないが、
レイアウトなど、非常に直感的にデザインをいじることができるので満足している。</p>
</div>
<div class="section" id="disqus">
<h4><a class="toc-backref" href="#id13">DISQUSなどブログパーツを用いたソーシャル対応など</a></h4>
<p>動的な処理は一切動かないので、各種ブログパーツに委ねないと、なんとも寂しいブログになるので、
好みのものを配置する。</p>
<p>個人的に、あまりブログパーツを置き過ぎると表示が重くなるのと、
見た目もごちゃごちゃするので、おいたのは以下のものだけ。</p>
<ul class="simple">
<li><a class="reference external" href="http://disqus.com/">DISQUS</a></li>
<li><a class="reference external" href="http://twitter.com/about/resources/tweetbutton">twitter公式 tweet数表示widget</a></li>
</ul>
<p><a class="reference external" href="http://disqus.com/">DISQUS</a> は、Javascriptで動く、コメントやトラックバック機能を実現できるモジュールで、
このブログの一番下にも貼ってあるブログパーツ。</p>
<p>ログインしないとコメントさせない設定、など非常に機能が豊富で、
何より静的なHTMLの中でこういう機能が実現できるのが嬉しい。</p>
</div>
</div>
<div class="section" id="id3">
<h3><a class="toc-backref" href="#id14">諦めた機能</a></h3>
<p>静的なHTMLのブログ、ということでいくつか諦めた機能は以下。</p>
<ul class="simple">
<li>Smartphone用にページ表示を最適化して見せること</li>
<li>時限式の記事反映（明日の12時に自動で反映されるように設定する、など）</li>
<li>画像アップロード機能（画像はFlickrなどにまとめて置くようにする）</li>
</ul>
</div>
<div class="section" id="id4">
<h3><a class="toc-backref" href="#id15">まとめ</a></h3>
<p>長々と書いたが、上記のような構成のブログ環境は、アメリカなど海外ではやや浸透しつつある構成っぽい。
ぐぐると英語のページが色々ひっかかったので。</p>
<p>ただ、上記の設定内容を1つのページにまとめて書かれたものはなかったので、頑張って書いてみた次第。</p>
<p>GitHubにpushしなくても、上述の通り、Blogofileにはwebサーバも同梱されているので、
プライベートなブログとしてこっそり書くこともできるし、
個人ブログという用途だけではなく、プロジェクトページや企業ページでも使えると思うので、
興味を持った人は是非お試しください。</p>
<p>Blogofileの動作変更、SEO対策、記事を書く上でのgit branchの使い方、など
細かい設定点は他にも色々あるので、今後記事にしていく予定。</p>
</div>
</div>
]]></content>
  </entry>
</feed>
