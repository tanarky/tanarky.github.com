<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>tanarky.com</title>
    <link>http://tanarky.com/blog</link>
    <description>tanarky website</description>
    <pubDate>Wed, 07 May 2014 04:27:48 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Rhino/Node Javascript実行環境構築 on Macbook</title>
      <link>http://tanarky.com/blog/2012/03/12/00f_javascript_env_on_macbook</link>
      <pubDate>Mon, 12 Mar 2012 14:00:00 JST</pubDate>
      <category><![CDATA[javascript]]></category>
      <category><![CDATA[env]]></category>
      <category><![CDATA[install]]></category>
      <guid isPermaLink="true">http://tanarky.com/blog/2012/03/12/00f_javascript_env_on_macbook</guid>
      <description>Rhino/Node Javascript実行環境構築 on Macbook</description>
      <content:encoded><![CDATA[<div class="document">
<div class="contents topic" id="id1">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#rhino" id="id3">Rhino</a></li>
<li><a class="reference internal" href="#node" id="id4">Node</a></li>
</ul>
</div>
<p>Macbookにて、Javascript実行環境を整えたので、その際の手順履歴</p>
<div class="section" id="rhino">
<h3><a class="toc-backref" href="#id3">Rhino</a></h3>
<p>Rhino = Java実装のJavascript実行環境</p>
<p>その他の言語のJava実装は以下のものがある</p>
<div class="highlight"><pre>Jython - port of Python.
JRuby - port of Ruby.
Rhino - port of ECMAScript.
Clojure - Lisp dialect.
Groovy - Scripting language for the JVM.
Scala - object-oriented, functional language for the JVM.
</pre></div>
<p>Macにinstallするには、brew installで一発。</p>
<p>2012/03/12 時点でinstallされるversionは1.7R3</p>
<div class="highlight"><pre>brew install rhino
</pre></div>
<p>実行するには以下のjarを指定する。-eでコードを直接渡す。</p>
<div class="highlight"><pre>% java -jar /usr/local/Cellar/rhino/1.7R3/libexec/js.jar -e &quot;print(&#39;hello world!&#39;);&quot;
java -jar /usr/local/Cellar/rhino/1.7R3/libexec/js.jar -e &quot;print(&#39;hello worldjava -jar /usr/local/Cellar/rhino/1.7R3/libexec/js.jar&#39;);&quot;
hello worldjava -jar /usr/local/Cellar/rhino/1.7R3/libexec/js.jar
%
</pre></div>
<p>インタラクティブシェルは以下の通りに実行できる</p>
<div class="highlight"><pre>% java -jar /usr/local/Cellar/rhino/1.7R3/libexec/js.jar
Rhino 1.7 release 3 2011 05 09
js&gt; print(&#39;hello world!&#39;);
hello world!
js&gt;
</pre></div>
<p><a class="reference external" href="https://developer.mozilla.org/ja/Rhino">Rhino</a></p>
</div>
<div class="section" id="node">
<h3><a class="toc-backref" href="#id4">Node</a></h3>
<p><a class="reference external" href="http://nodejs.org/">http://nodejs.org/</a></p>
<p>こちらもJavascript実行環境。実装はV8だったりSpiderMondkeyだったり。</p>
<p>同じく、brew installにて。</p>
<div class="highlight"><pre>% brew install node
</pre></div>
<p>npmと単体テストフレームワークもついでにinstall</p>
<div class="highlight"><pre>% git clone git://github.com/creationix/nvm.git ~/.nvm
% nvm install v0.6.12
% nvm alias default v0.6.12
% source ~/.nvm/nvm.sh
% curl http://npmjs.org/install.sh | sh
% npm install nodeunit
% ln -s $HOME/.npm/nodeunit/0.7.4/package/bin/nodeunit $HOME/bin/nodeunit
</pre></div>
<ul class="simple">
<li><a class="reference external" href="http://d.hatena.ne.jp/ToQoz/20120312/1331512182">zsh on mac で nvm -&gt; nvm_ls:17: no matches found: vdefault* 対処</a></li>
</ul>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>jQuery UI autocomplete サンプル</title>
      <link>http://tanarky.com/blog/2012/02/11/00c_jqueryui_autocomplete_samples</link>
      <pubDate>Sat, 11 Feb 2012 21:00:00 JST</pubDate>
      <category><![CDATA[jquery]]></category>
      <category><![CDATA[javascript]]></category>
      <category><![CDATA[jqueryui]]></category>
      <guid isPermaLink="true">http://tanarky.com/blog/2012/02/11/00c_jqueryui_autocomplete_samples</guid>
      <description>jQuery UI autocomplete サンプル</description>
      <content:encoded><![CDATA[<div class="document">
<div class="contents topic" id="id1">
<p class="topic-title first">目次</p>
<ul class="simple">
<li><a class="reference internal" href="#id2" id="id6">スクロールバー付きサンプル</a></li>
<li><a class="reference internal" href="#suggest" id="id7">同一suggestデータサンプル</a></li>
<li><a class="reference internal" href="#remotesuggest" id="id8">remote問い合わせsuggest</a></li>
<li><a class="reference internal" href="#id5" id="id9">関連リンク</a></li>
</ul>
</div>
<p>jQuery UI の autocomplete ウィジェットについて
調査したので、その時のメモ</p>
<dl class="docutils">
<dt>jquery version</dt>
<dd>1.7.1</dd>
<dt>jquery UI version</dt>
<dd>1.8.16</dd>
</dl>
<div class="section" id="id2">
<h3><a class="toc-backref" href="#id6">スクロールバー付きサンプル</a></h3>
<p>銀行名か金融機関コードで検索して、
入力補完してくれるサンプルを書いた</p>
<ul class="simple">
<li><a class="reference external" href="http://tanarky.com/samples/jqueryui/autocomplete/sample3.html">jquery UI autocomplete スクロール付きサンプル</a></li>
<li><a class="reference external" href="https://github.com/tanarky/tanarky.github.com/blob/master/samples/jqueryui/autocomplete/sample3.html">jquery UI autocomplete スクロール付きサンプル(ソースコード)</a></li>
</ul>
<p>ポイントは以下の通り</p>
<ol class="arabic simple">
<li>.ui-autocompleteクラスにmax-heightを指定することで、autocomplete部分のスクロールを実現</li>
<li>候補がクリックされたときに、そのイベントを拾って、別フィールド2つにデータを補完</li>
<li>別フィールドはreadonly属性で編集不可に</li>
<li>autocomplete optionにminLength=0を指定。入力がなくても、下キーで候補表示</li>
<li>suggestデータは、javascript内部にベタ書きで持っている。</li>
</ol>
<blockquote>
<ul class="simple">
<li>データ構造は、配列</li>
<li>配列の要素は、Hashで、valueというキーの値が検索対象となる</li>
<li>value以外は、任意のキーを指定可能</li>
</ul>
</blockquote>
</div>
<div class="section" id="suggest">
<h3><a class="toc-backref" href="#id7">同一suggestデータサンプル</a></h3>
<p>こちらも、銀行名か金融機関コードで検索して、
入力補完してくれるサンプル。</p>
<p>前のサンプルと違う点は、2つのフィールドに対して、同一のsuggestデータを使っている</p>
<ul class="simple">
<li><a class="reference external" href="http://tanarky.com/samples/jqueryui/autocomplete/sample4.html">jquery UI autocomplete 2つの検索フィールドサンプル</a></li>
<li><a class="reference external" href="https://github.com/tanarky/tanarky.github.com/blob/master/samples/jqueryui/autocomplete/sample4.html">jquery UI autocomplete 2つの検索フィールドサンプル(ソースコード)</a></li>
</ul>
<p>ポイントは以下の通り</p>
<ol class="arabic simple">
<li>focusオプションで、候補にマウスオーバーした時点でデータを入れる(return false忘れずに)</li>
<li>複数のフィールドに同一オプションでautocomplete登録</li>
</ol>
</div>
<div class="section" id="remotesuggest">
<h3><a class="toc-backref" href="#id8">remote問い合わせsuggest</a></h3>
<p>上記2つのサンプルは、挙動を理解しやすいようにするため、
サジェストするためのデータはコードに埋めたが、
remote API呼び出しも可能。</p>
<ul class="simple">
<li><a class="reference external" href="http://jqueryui.com/demos/autocomplete/#remote">jquery UI autocomplete 公式ドキュメント demo(remote API呼び出し)</a></li>
</ul>
<p>上記のサンプルでは、jquery側空、search.phpというAPIを呼び出し、
APIがJSON形式のデータを返している。</p>
<p>APIは、GETのパラメータで&quot;term&quot;を受け取り、
それに基づくsuggestデータを返却している</p>
<p><a class="reference external" href="http://jqueryui.com/demos/autocomplete/search.php?term=or">http://jqueryui.com/demos/autocomplete/search.php?term=or</a></p>
</div>
<div class="section" id="id5">
<h3><a class="toc-backref" href="#id9">関連リンク</a></h3>
<ul class="simple">
<li><a class="reference external" href="http://jqueryui.com/demos/autocomplete/">jquery UI autocomplete 公式ドキュメント demo</a></li>
</ul>
</div>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
