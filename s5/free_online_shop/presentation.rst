============================================================
distributed shopping mall
============================================================


:企画:
    Satoshi Tanaka (tanarky@gmail.com)

:バージョン: 0.0.1
:日付: 2012/05/22

ショッピングモールサービスとは
============================================================

別名 `電子商店街 <http://ja.wikipedia.org/wiki/%E9%9B%BB%E5%AD%90%E5%95%86%E5%BA%97%E8%A1%97>`_

..
  
  インターネット上で複数の商店のページ（電子商店）を一つのサイトにまとめて、様々な品物を販売するウェブサイトのこと

従来型モールサービスが抱える課題 1
============================================================

*消費者* 目線

- 個々の店舗を意識しにくい

*店舗* 目線

- システム上の制約で他店との差異を出しにくい
- 売れなくても月額固定費がかかる
- 売れても3-5%の手数料をとられる

従来型モールサービスが抱える課題 2
============================================================

*モール運営者* 目線

- (開発はまだしも)システム運用管理にコストがかかる
- 店舗へのITスキルサポートにコストがかかる
- 店舗への販売コンサルティングにコストがかかる

従来型モールシステムは
============================================================

全店舗のデータをモール運営者が管理するインフラに配置する 

「 **中央集中型システム** 」 が主流

従来型モール システム運用タスク
============================================================

- インフラ管理(サーバ管理／ネットワーク管理)
- アプリケーション開発／運用
- セキュリティ対策

本当に
============================================================

中央集中型システムが一番よい実装なのか？

目的
============================================================

現状かかえる課題を、システムから見直して解決し、

より良いモールサービスを提供したい








従来型ショッピングモールシステム 考察1
============================================================

システム構成

- 全店舗のデータをモール運営サーバに配置
- サーバ／ネットワーク管理をモール運営者が行う
- モールシステムフレームワーク上で店舗が設定をかえてサービス運用

- 自由度が低い傾向にある

  - ドメイン
  - セキュリティ対策による禁止事項(Jsなど)

- 運営側のコストが高い
- 固定費がかかる
- 仕組みが複雑化する傾向にある


中央集中型モールの役割分担
============================================================

1. モール運営者

  - サーバ／ネットワーク管理(インフラ管理)
  - データ管理(注文データ、商品データ、など)
  - モールシステムのプログラム管理

2. 店舗運営者

サーバはAppEngineを使う


無料版の問題点
============================================================

- 負荷に耐えられない

  - 特に画像

- appspot.comドメイン固定

有料版
============================================================

EC2をベースとしたインフラにのせかえ

固定費徴収

どうやって稼ぐか
============================================================

- 無料版 -> Adsenseをはる＋注文成約に応じたロイヤルティ課金(1-2%程度)
- 有料版 -> 固定費(アクセスやカスタマイズに応じて段階課金)+ロイヤルティ(1-2%程度)

システム構成
============================================================

- 無料版 -> Appengineのアカウントを取得してもらい、こちら側からコードをPush、Webツールでデータ運用
- 有料版 -> 無料版の仕組み(コード)をEC2上で動かし、負荷対策やBackup強化などを行う

機能
============================================================

無料版、有料版ともに、管理用APIを搭載し、データを一元管理できる

- 商品データ参照
- 注文データ参照
- ページデザインデータ参照
- 開店ステータス参照・更新

ロイヤルティ未払い、などあった場合、開店ステータス更新APIから強制閉店させる、など

実装
============================================================

- Python
- Twitter Bootstrap

DEMO
============================================================

demo

技術的課題
============================================================

- AppEngineへのupload自動化
- 管理システム開発
- 請求システム開発

今後の課題(TODO)
============================================================

- 商品検索機能の拡充
- 物流連携課題の克服
- 決済方法の拡充とカート統一

まとめ
============================================================

がんばる

